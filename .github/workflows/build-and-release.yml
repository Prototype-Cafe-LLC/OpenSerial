name: Build and Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  GO_VERSION: "1.24.1"
  BINARY_NAME: "openserial"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with coverage
        run: go test -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
            ext: ""
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
            ext: ""
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: ".exe"
          - os: windows
            arch: arm64
            goos: windows
            goarch: arm64
            ext: ".exe"
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
            ext: ""
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
            ext: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            VERSION="dev-$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Build binary
        run: |
          mkdir -p dist/${{ matrix.os }}-${{ matrix.arch }}
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags "-X main.version=${{ steps.version.outputs.version }}" \
            -o dist/${{ matrix.os }}-${{ matrix.arch }}/${{ env.BINARY_NAME }}${{ matrix.ext }} \
            ./cmd/openserial

      - name: Create checksum
        run: |
          cd dist/${{ matrix.os }}-${{ matrix.arch }}
          sha256sum ${{ env.BINARY_NAME }}${{ matrix.ext }} > ${{ env.BINARY_NAME }}${{ matrix.ext }}.sha256

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/${{ matrix.os }}-${{ matrix.arch }}/
          retention-days: 30

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: openserial/openserial
          tags: |
            type=ref,event=tag
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy all binaries to release-assets with proper naming
          for dir in dist/*/; do
            platform=$(basename "$dir")
            for file in "$dir"*; do
              if [[ -f "$file" && ! "$file" =~ \.sha256$ ]]; then
                filename=$(basename "$file")
                cp "$file" "release-assets/${{ env.BINARY_NAME }}-$platform-$filename"
              fi
            done
          done

          # Copy checksums
          for dir in dist/*/; do
            platform=$(basename "$dir")
            for file in "$dir"*.sha256; do
              if [[ -f "$file" ]]; then
                filename=$(basename "$file")
                cp "$file" "release-assets/${{ env.BINARY_NAME }}-$platform-$filename"
              fi
            done
          done

          # Create a combined checksums file
          find release-assets -name "*.sha256" -exec cat {} \; > release-assets/checksums.txt

          # List all files for verification
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
